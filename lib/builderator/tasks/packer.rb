require 'aws-sdk'
require 'thor'

require_relative '../control/data'
require_relative '../interface/packer'
require_relative '../patch/thor-actions'

module Builderator
  module Tasks
    ##
    # Wrap Packer commands
    ##
    class Packer < Thor
      include Thor::Actions

      def self.exit_on_failure?
        true
      end

      class_option :debug, :type => :boolean

      desc 'configure [PROFILE=default]', 'Generate a packer configuration'
      def configure(profile = :default)
        Config.profile.use(profile)

        invoke Tasks::Version, :current, [], options
        puts Interface.packer.render if options['debug']
      end

      desc 'build [PROFILE=default *ARGS]', 'Run a build with the installed version of packer'
      def build(profile = :default, *args)
        invoke :configure, [profile], options
        run_with_input "#{Interface.packer.command} build - #{ args.join('') }", Interface.packer.render
      end

      desc 'copy PROFILE', 'Copy AMIs generated by packer to other regions'
      def copy(profile)
        invoke :configure, [profile], options

        images.each do |image_name, (image, build)|
          parameters = {
            :source_region => Config.aws.region,
            :source_image_id => image.image_id,
            :name => image_name,
            :description => image.description
          }

          build.ami_regions.each do |region|
            say_status :copy, "AMI #{image_name} (#{image.image_id}) from #{Config.aws.region} to #{region}"
            Util.ec2_region(region).copy_image(parameters)
          end
        end

        invoke :tag, [profile], options
        invoke :wait, [profile], options
      end

      desc 'tag PROFILE', 'Tag AMIs other regions'
      def tag(profile)
        invoke :configure, [profile], options

        images.each do |image_name, (image, build)|
          filters = [{
            :name => 'name',
            :values => [image_name]
          }]

          build.ami_regions.each do |region|
            regional_image = Util.ec2_region(region)
                                 .describe_images(:filters => filters).images.first

            say_status :tag, "AMI #{image_name} (#{regional_image.image_id}) in #{region}"
            Util.ec2_region(region).create_tags(:resources => [regional_image.image_id], :tags => image.tags)
          end
        end
      end

      desc 'wait PROFILE', 'Wait for coppied AMIs to become available in another region'
      def wait(profile)
        invoke :configure, [profile], options

        waiting = true

        while waiting
          say_status :wait, 'for coppied images to be available', :yellow
          waiting = false

          images.each do |image_name, (image, build)|
            filters = [{
              :name => 'name',
              :values => [image_name]
            }]

            build.ami_regions.each do |region|
              regional_image = Util.ec2_region(region)
                                   .describe_images(:filters => filters).images.first

              status_color = case regional_image.state
                             when 'pending' then :yellow
                             when 'available' then :green
                             else :red
                             end

              say_status :image, "#{regional_image.image_id} (#{regional_image.name}) is #{regional_image.state}", status_color
              waiting = (regional_image.state == 'pending') || waiting
            end
          end

          ## If waiting == false, loop immediately to break
          sleep(5) if waiting
        end

        say_status :complete, 'All coppied images are available'
      end

      private

      ## Find details for generated images in current region
      def images
        @images ||= Config.profile.current.packer.build.each_with_object({}) do |(_, build), memo|
          memo[build.ami_name] = [Control::Data.lookup(:image, :name => build.ami_name).first, build]
        end
      end
    end
  end
end
